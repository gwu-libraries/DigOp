##################################################
# file: WSBarcodePages_types.py
#
# schema types generated by "ZSI.generate.wsdl2python.WriteServiceModule"
#    C:\Python27\scripts\wsdl2py-script.py http://128.164.212.164:8080/BarcodeService/WSBarcodePages?wsdl
#
##################################################

import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED

##############################
# targetNamespace
# http://WSBarcode/
##############################

class ns0:
    targetNamespace = "http://WSBarcode/"

    class getPages_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://WSBarcode/"
        type = (schema, "getPages")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getPages_Def.schema
            TClist = [ZSI.TC.String(pname="barcode", aname="_barcode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._barcode = None
                    return
            Holder.__name__ = "getPages_Holder"
            self.pyclass = Holder

    class getPagesResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://WSBarcode/"
        type = (schema, "getPagesResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getPagesResponse_Def.schema
            TClist = [ZSI.TCnumbers.Ishort(pname="return", aname="_return", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = None
                    return
            Holder.__name__ = "getPagesResponse_Holder"
            self.pyclass = Holder

    class getPages_Dec(ElementDeclaration):
        literal = "getPages"
        schema = "http://WSBarcode/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://WSBarcode/","getPages")
            kw["aname"] = "_getPages"
            if ns0.getPages_Def not in ns0.getPages_Dec.__bases__:
                bases = list(ns0.getPages_Dec.__bases__)
                bases.insert(0, ns0.getPages_Def)
                ns0.getPages_Dec.__bases__ = tuple(bases)

            ns0.getPages_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getPages_Dec_Holder"

    class getPagesResponse_Dec(ElementDeclaration):
        literal = "getPagesResponse"
        schema = "http://WSBarcode/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://WSBarcode/","getPagesResponse")
            kw["aname"] = "_getPagesResponse"
            if ns0.getPagesResponse_Def not in ns0.getPagesResponse_Dec.__bases__:
                bases = list(ns0.getPagesResponse_Dec.__bases__)
                bases.insert(0, ns0.getPagesResponse_Def)
                ns0.getPagesResponse_Dec.__bases__ = tuple(bases)

            ns0.getPagesResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getPagesResponse_Dec_Holder"

# end class ns0 (tns: http://WSBarcode/)
